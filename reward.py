import re

def find_boxed_x(string: str):
    # Get numbers in \\boxed{}, and strip commas
    matches = re.findall(r'\\boxed\{\s*(-?\d{1,3}(?:,\d{3})*|\-?\d+)\s*\}', string)
    cleaned = [m.replace(",", "") for m in matches]
    x = cleaned[-1] if cleaned else None
    return x


# This is the reward function
# If you want to implement a custom reward function, do it here
# It should return some scalar representing the reward for this particular sample
def compute_reward(response_text: str, ground_truth: str, log_path):
    '''
    response_text: text generated by the model
    ground_truth: actual desired answer.
    log_path: string or None. Saves model responses to log_path
    '''
    answer = find_boxed_x(response_text)
    if answer is None:
        answer = ""
    if log_path is not None:
        with open(log_path, "a") as file:
            file.write(f"Model Response: {response_text} \nActual Answer: {ground_truth} \nDetected Answer: {answer}\n\n")
    if answer.strip() == str(ground_truth).strip():
        return 1
    else:
        return 0